
import torch
import torch.nn as nn


class UpConv(nn.Module):
    def __init__(self, upscale_factor, input, output, kernel, stride, padding, ratio=0.5):
        super(UpConv, self).__init__()
        self.conv = SPConv_3x3(inplanes=input, outplanes=output, kernel=kernel, stride=stride, padding=padding, ratio=ratio)
        self.up = nn.PixelShuffle(upscale_factor)

    def forward(self, x):
        x=self.conv(x)
        x=self.up(x)      
        return x






class SPConv_3x3(nn.Module):
    def __init__(self, inplanes, outplanes, kernel, stride, padding, ratio=0.5):
        super(SPConv_3x3, self).__init__()
        self.inplanes_3x3 = int(inplanes*ratio)
        self.inplanes_1x1 = inplanes - self.inplanes_3x3
        self.outplanes_3x3 = int(outplanes*ratio)
        self.outplanes_1x1 = outplanes - self.outplanes_3x3
        self.outplanes = outplanes
        self.stride = stride
        self.padding = padding

        self.gwc = nn.Conv2d(self.inplanes_3x3, self.outplanes, kernel_size=kernel, stride=self.stride, padding=self.padding, groups=2, bias=False)
        self.pwc = nn.Conv2d(self.inplanes_3x3, self.outplanes, kernel_size=1, stride=self.stride, bias=False)

        self.conv1x1 = nn.Conv2d(self.inplanes_1x1, self.outplanes,kernel_size=1,stride=self.stride)
        self.avgpool_s2_1 = nn.AvgPool2d(kernel_size=2,stride=2)
        self.avgpool_s2_3 = nn.AvgPool2d(kernel_size=2, stride=2)
        self.avgpool_add_1 = nn.AdaptiveAvgPool2d(1)
        self.avgpool_add_3 = nn.AdaptiveAvgPool2d(1)
        self.bn1 = nn.BatchNorm2d(self.outplanes)
        self.bn2 = nn.BatchNorm2d(self.outplanes)
        self.ratio = ratio
        self.groups = int(1/self.ratio)
    def forward(self, x):
        b, c, _, _ = x.size()


        x_3x3 = x[:,:int(c*self.ratio),:,:]
        x_1x1 = x[:,int(c*self.ratio):,:,:]
        out_3x3_gwc = self.gwc(x_3x3)
       
        if self.stride ==2:
            x_3x3 = self.avgpool_s2_3(x_3x3)
        out_3x3_pwc = self.pwc(x_3x3)
        
        out_3x3 = out_3x3_gwc + out_3x3_pwc
        out_3x3 = self.bn1(out_3x3)
        out_3x3_ratio = self.avgpool_add_3(out_3x3).squeeze(dim=3).squeeze(dim=2)

        # use avgpool first to reduce information lost
        if self.stride == 2:
            x_1x1 = self.avgpool_s2_1(x_1x1)

        out_1x1 = self.conv1x1(x_1x1)
        out_1x1 = self.bn2(out_1x1)
        out_1x1_ratio = self.avgpool_add_1(out_1x1).squeeze(dim=3).squeeze(dim=2)

        out_31_ratio = torch.stack((out_3x3_ratio, out_1x1_ratio), 2)
        out_31_ratio = nn.Softmax(dim=2)(out_31_ratio)
        out = out_1x1 * (out_31_ratio[:,:,1].view(b, self.outplanes, 1, 1).expand_as(out_1x1))\
              + out_3x3 * (out_31_ratio[:,:,0].view(b, self.outplanes, 1, 1).expand_as(out_3x3))

        return out

conv = SPConv_3x3(inplanes=32, outplanes=32, kernel=8, stride=4, padding=2, ratio=0.5)
#conv = UpConv(upscale_factor=4, input=32, output=32*4*4, kernel=3, stride=1, padding=1, ratio=0.5)
input = torch.randn(1,32,64,64)
out=conv(input)
print(out.shape)

print(out.shape)
